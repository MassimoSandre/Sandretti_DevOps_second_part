name: C/C++ CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  # build_and_test:

  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Configure
  #     run: |
  #         git submodule update --init --recursive
  #         mkdir -p build
  #         cd build
  #         cmake ..

  #   - name: Build
  #     run: |
  #         cd build
  #         make

  #   - name: Run tests
  #     run: |
  #         cd build
  #         ctest --output-on-failure
  # build_container:
  #   needs: build_and_test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: recursive
  #     - name: Install Singularity
  #       run: |
  #         export DEBIAN_FRONTEND=noninteractive
  #         export TZ=Europe/Rome

  #         echo "tzdata tzdata/Areas select Europe"         | sudo debconf-set-selections
  #         echo "tzdata tzdata/Zones/Europe select Rome"   | sudo debconf-set-selections

  #         sudo -E apt-get update
  #         sudo -E apt-get install -y tzdata

  #         sudo -E apt-get install -y singularity-container

  #     - name: Build Singularity container image
  #       run: |
  #         sudo singularity build image_to_grayscale.sif singularity.def

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: singularity-image
  #         path: image_to_grayscale.sif
  
  connect_to_cluster:
    runs-on: ubuntu-latest
    steps:
      # - name: Checkout repository
      #   uses: actions/checkout@v3

      # - name: SSH keys
      #   run: |
      #     mkdir -p ~/.ssh
          
      #     echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 -d > ~/.ssh/my_key
      #     echo "${{ secrets.SSH_PUBLIC_KEY }}"  | base64 -d > ~/.ssh/my_key.pub
      #     echo "${{ secrets.SSH_CERT }}"        | base64 -d > ~/.ssh/my_key.crt

      #     chmod 600 ~/.ssh/my_key
      #     chmod 644 ~/.ssh/my_key.pub ~/.ssh/my_key.crt

      # - name: SSH agent
      #   run: |
      #     eval "$(ssh-agent -s)"

      # - name: Connection
      #   run: |
      #     ssh -i ~/.ssh/my_key -o StrictHostKeyChecking=no msandret@login.g100.cineca.it
      #     echo "${{ secrets.SSH_PASSPHRASE }}"

      - uses: actions/checkout@v3

      - name: Install expect
        run: sudo apt-get update && sudo apt-get install -y expect

      - name: Setup SSH key and agent, then connect
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PASSPHRASE: ${{ secrets.SSH_PASSPHRASE }}
        run: |
          mkdir -p ~/.ssh
          
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 -d > ~/.ssh/my_key
          echo "${{ secrets.SSH_PUBLIC_KEY }}"  | base64 -d > ~/.ssh/my_key.pub
          echo "${{ secrets.SSH_CERT }}"        | base64 -d > ~/.ssh/my_key-cert.pub

          chmod 600 ~/.ssh/my_key
          chmod 644 ~/.ssh/my_key.pub ~/.ssh/my_key-cert.pub

          eval "$(ssh-agent -s)"

          expect <<EOF
          spawn ssh-add "$HOME/.ssh/my_key"
          expect "Enter passphrase for $HOME/.ssh/my_key:"
          send "$SSH_PASSPHRASE\r"
          expect eof
          EOF

          ssh -o StrictHostKeyChecking=no msandret@login.g100.cineca.it